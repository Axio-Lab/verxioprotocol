// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model LoyaltyProgram {
  id          String   @id @default(cuid())
  creator     String   
  publicKey   String 
  privateKey  String   ///@encrypted
  signature   String 
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model LoyaltyPass {
  id          String   @id @default(cuid())
  collection  String  
  recipient   String  
  publicKey   String 
  privateKey  String   ///@encrypted
  signature   String 
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Raffle {
  id              String   @id @default(cuid())
  name            String
  description     String
  prizeType       PrizeType
  prizeDetails    Json     // Stores different prize details based on type
  startDate       DateTime
  endDate         DateTime
  drawDate        DateTime
  status          RaffleStatus @default(UPCOMING)
  entryCost       Int?      // XP cost to enter, null if free
  minTier         String?   // Minimum tier required
  numWinners      Int       // Number of winners to pick
  winners         RaffleWinner[]
  
  programAddress  String    // The loyalty program address
  creator         String    // Wallet address of creator 
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model RaffleWinner {
  id              String   @id @default(cuid())
  raffleId        String
  raffle          Raffle @relation(fields: [raffleId], references: [id])
  passPublicKey   String   // Winner's loyalty pass public key
  position        Int      // 1st, 2nd, 3rd place etc.
  claimed         Boolean @default(false)
  claimedAt       DateTime?
}

enum PrizeType {
  TOKEN
  MERCH
  NFT
  OTHER
}

enum RaffleStatus {
  UPCOMING
  ACTIVE
  COMPLETED
  CANCELLED
}